# COPY-PASTED FOR NOW
@panel_width_minus_30 = 510
@panel_width_minus_20 = 520			
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

# CMF Situation specific
@com_character_width = 200

types com_situation_types {
    type com_journal_entry_situation = flowcontainer {
        minimumsize = { @panel_width_plus_14 -1 }
        direction = vertical
        using = default_list_position
        spacing = 10
        margin_top = -4

        # Header
        flowcontainer = {
            direction = vertical
            using = default_list_position
            spacing = 10

            background = {
                margin_top = -44
                margin_bottom = -20
                texture = "gfx/interface/situation/com_rise_of_communism.dds"
                alpha = 0.5
                modify_texture = {
                    texture = "gfx/interface/masks/fade_vertical_bottom.dds"
                    spriteType = Corneredstretched
                    spriteborder = { 0 0 }
                    blend_mode = alphamultiply
                    alpha = 0.9
                }
            }

            # Side names header
            default_header_2texts_clean = {
                using = default_list_position
                blockoverride "text1" {
                    datacontext = "[ComSituationLeft]"
                    using = com_side_header_properties
                }
                blockoverride "text2" {
                    datacontext = "[ComSituationRight]"
                    using = com_side_header_properties
                }
                blockoverride "size" {
                    size = { @panel_width_plus_14 44 }
                }
            }

            # Leader country ruler characters
            flowcontainer = {
                direction = horizontal
                minimumsize = { @panel_width_plus_14 44 }
                using = default_list_position

                com_journal_entry_character_situation_left = {
                    datacontext = "[ComSituationLeft.Var('com_leader').GetCountry.GetRuler]"
                }
                widget = {
                    # Spacer
                    size = {
                        @[ panel_width - ( com_character_width * 2 ) ]
                        20
                    }
                }
                com_journal_entry_character_situation_right = {
                    datacontext = "[ComSituationRight.Var('com_leader').GetCountry.GetRuler]"
                }
            }

            # Leader country names
            flowcontainer = {
                direction = horizontal
                using = default_list_position

                com_leader_header_left = {
                    blockoverride "text" {
                        raw_text = "[ComSituationLeft.Var('com_leader').GetCountry.GetName]"
                    }
                    blockoverride "size" {
                        size = { @[ panel_width_plus_14 / 2 - 20 ] 40 }
                    }
                }

                widget = {
                    size = { 40 40 }
                    textbox = {
                        parentanchor = hcenter|vcenter
                        align = center
                        size = { 40 40 }
                        default_format = "#header"
                        using = fontsize_large
                        text = com_situation_vs
                    }
                }

                com_leader_header_right = {
                    blockoverride "text" {
                        align = right
                        raw_text = "[ComSituationRight.Var('com_leader').GetCountry.GetName]"
                    }
                    blockoverride "size" {
                        size = { @[ panel_width_plus_14 / 2 - 20 ] 40 }
                    }
                }
            }

            flowcontainer = {
                direction = horizontal
                using = default_list_position
                spacing = 20

                com_situation_victory_conditions = {
                    visible = "[JournalEntry.CanComplete]"
                    tooltip = "[JournalEntry.GetCompletionTooltip]"
                    datacontext = "[ComSituationLeft]"
                }
                com_situation_victory_conditions = {
                    visible = "[Not(StringIsEmpty(JournalEntry.GetFailureTooltip))]"
                    tooltip = "[JournalEntry.GetFailureTooltip]"
                    datacontext = "[ComSituationRight]"
                }
            }

            # Factions header
            default_header_clean = {
                using = default_list_position
                blockoverride "text" {
                    raw_text = "[com_concept_situation_faction]"
                }
                blockoverride "size" {
                    size = { @panel_width_plus_14 44 }
                }
            }
        }

        # Factions
        flowcontainer = {
            direction = horizontal
            spacing = 20
            margin = { 20 10 }

            # At least one side needs to have factions for them to show up
            visible = "[Or(
                Not(IsDataModelEmpty(ComSituationLeft.GetList('com_factions'))),
                Not(IsDataModelEmpty(ComSituationRight.GetList('com_factions')))
            )]"

            com_situation_factions = {
                blockoverride "context" {
                    datacontext = "[ComSituationLeft]"
                }
            }
            com_situation_factions = {
                blockoverride "context" {
                    datacontext = "[ComSituationRight]"
                }
            }
        }

        com_situation_buttons = {}
    }

    type com_situation_factions = flowcontainer {
        block "context" {}
        direction = vertical
        spacing = 20
        datamodel = "[Scope.GetList('com_factions')]"

        item = {
            flowcontainer = {
                margin_top = -2
                background = {
                    using = simple_frame
                }

                default_header_clean_faded = {
                    blockoverride "text" {
                        raw_text = "[Scope.Var('com_name').GetFlagName]"
                        tooltipwidget = {
                            RegularTooltip = {
                                blockoverride "tooltip_content" {
                                    custom_tooltip_textbox = {
                                        raw_text = "[Scope.Var('com_name').GetFlagName]"
                                        default_format = "#header"
                                    }
                                    custom_tooltip_textbox = {
                                        raw_text = "[Scope.Var('com_desc').GetFlagName]"
                                    }
                                }
                            }
                        }
                    }
                    blockoverride "size" {
                        size = { @[panel_width_half - 20] 45 }
                    }
                }
                direction = vertical

                dynamicgridbox = {
                    parentanchor = hcenter
                    datamodel = "[Scope.GetList('com_countries')]"
                    datamodel_wrap = 6
                    flipdirection = yes

                    item = {
                        flowcontainer = {
                            margin = { 5 10 }
                            minimumsize = { 27 18 }
                            tiny_flag = {
                                datacontext = "[Scope.GetCountry]"
                            }
                        }
                    }
                }
            }
        }
    }

    type com_situation_victory_conditions = flowcontainer {
        background = {
            using = simple_frame
        }
        margin = { 5 5 }
        textbox = {
            default_format = "#yellow"
            raw_text = "[Scope.Var('com_name').GetFlagName] [Localize('com_situation_victory_conditions')]"
            multiline = yes
            autoresize = yes
            maximumsize = { 240 -1 }
            minimumsize = { 240 40 }
            align = center
        }
    }

    type com_situation_buttons = flowcontainer {
        using = default_list_position
        direction = vertical
        spacing = 10
        visible = "[And(
            Not(IsDataModelEmpty(JournalEntry.GetScriptedButtons)),
            Not(IsDataModelEmpty(ComSituation.GetList('com_button_groups')))
        )]"
        datamodel = "[ComSituation.GetList('com_button_groups')]"

        item = {
            flowcontainer = {
                using = default_list_position
                direction = vertical
                visible = "[Not(IsDataModelEmpty(Scope.GetList('com_buttons')))]"
                spacing = 10

                default_header_clean = {
                    using = default_list_position
                    blockoverride "text" {
                        raw_text = "[Scope.Var('com_name').GetFlagName]"
                        tooltip = "[Scope.Var('com_desc').GetFlagName]"
                    }
                    blockoverride "size" {
                        size = { @panel_width_plus_14 44 }
                    }
                }

                dynamicgridbox = {
                    datamodel = "[Scope.GetList('com_buttons')]"
                    parentanchor = hcenter
                    datamodel_wrap = 2
                    flipdirection = yes

                    item = {
                        flowcontainer = {
                            datamodel = "[JournalEntry.GetScriptedButtons]"
                            direction = vertical

                            item = {
                                widget = {
                                    visible = "[EqualTo_string(ScriptedButton.GetName, Scope.GetFlagName)]"
                                    size = { 260 60 }

                                    scripted_journal_entry_button = {
                                        parentanchor = center
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    type com_leader_header_left = default_header {
        blockoverride "deco" {}
        blockoverride "header_background" {
            background = {
                using = default_header_bg
                blockoverride "header_fade_mask" {
                    modify_texture = {
                        texture = "gfx/interface/masks/fade_horizontal_right.dds"
                        spriteType = Corneredstretched
                        spriteborder = { 0 0 }
                        blend_mode = alphamultiply
                        alpha = 0.9
                    }
                }
            }
        }
    }

    type com_leader_header_right = default_header {
        blockoverride "deco" {}
        blockoverride "header_background" {
            background = {
                using = default_header_bg
                blockoverride "header_fade_mask" {
                    modify_texture = {
                        texture = "gfx/interface/masks/fade_horizontal_left.dds"
                        spriteType = Corneredstretched
                        spriteborder = { 0 0 }
                        blend_mode = alphamultiply
                        alpha = 0.9
                    }
                }
            }
        }
    }

    type com_journal_entry_character_situation_left = character_portrait_base {
        size = { @com_character_width 160 }
        blockoverride "portrait_size" {
            size = { @com_character_width 200 }
        }
        blockoverride "portrait_texture" {
            portrait_texture = "[Character.GetAnimatedPortrait('environment_event_01', 'camera_duel_01', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
        }
        blockoverride "show_hat" {}
        blockoverride "portrait_icons" {}
    }

    type com_journal_entry_character_situation_right = character_portrait_base {
        size = { @com_character_width 160 }
        blockoverride "portrait_size" {
            size = { @com_character_width 200 }
        }
        blockoverride "portrait_texture" {
            portrait_texture = "[Character.GetAnimatedPortrait('environment_event_01', 'camera_duel_02', 'idle', GetPortraitRenderSize(PdxGuiWidget.Self))]"
        }
        blockoverride "show_hat" {}
        blockoverride "portrait_icons" {}
    }
}

template com_side_header_properties {
    maximumsize = { 240 44 }
    raw_text = "#header [Scope.Var('com_name').GetFlagName]#! [Localize('com_situation_leader')]"
    tooltipwidget = {
        RegularTooltip = {
            blockoverride "tooltip_content" {
                custom_tooltip_textbox = {
                    raw_text = "[Scope.Var('com_name').GetFlagName]"
                    default_format = "#header"
                }
                custom_tooltip_textbox_with_empty_line = {
                    text = com_situation_header_leader_for
                }
                custom_tooltip_textbox = {
                    raw_text = "[Scope.Var('com_desc').GetFlagName]"
                }
            }
        }
    }
}